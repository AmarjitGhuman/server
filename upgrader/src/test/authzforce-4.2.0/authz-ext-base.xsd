<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2012-2015 Thales Services SAS.

    This file is part of AuthZForce.

    AuthZForce is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    AuthZForce is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with AuthZForce.  If not, see <http://www.gnu.org/licenses/>.

-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://thalesgroup.com/authz/model/ext/3.0"
	xmlns:tns="http://thalesgroup.com/authz/model/ext/3.0">
	<xs:annotation>
		<xs:documentation xml:lang="en">
			Base data model for XACML PDP extensions such as
			attribute/policy/resource finder or cache modules.
			Extend data types defined here to provide XML
			definitions for such extensions.
		</xs:documentation>
	</xs:annotation>
	<xs:complexType name="AbstractPdpExtension" abstract="true">
		<xs:annotation>
			<xs:documentation>PDP extension base type to identify all types of PDP extensions.
			</xs:documentation>
		</xs:annotation>
	</xs:complexType>
	<xs:complexType name="AbstractAttributeFinder" abstract="true">
		<xs:annotation>
			<xs:documentation>
				Attribute Finder base type. All 'Attribute Finder Modules' should extend this
				type.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="tns:AbstractPdpExtension"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="CacheMemoryStoreEvictionPolicy">
		<xs:annotation>
			<xs:documentation>
				Policy to be enforced when reaching the maximum allowed number of cached
				elements in memory.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="LRU">
				<xs:annotation>
					<xs:documentation>Least Recently Used</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="FIFO">
				<xs:annotation>
					<xs:documentation>First In First Out</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="LFU">
				<xs:annotation>
					<xs:documentation>Less Frequently Used</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="Cache">
		<xs:annotation>
			<xs:documentation>
				Cache module base type. All 'Cache Modules' should extend this type.
				For
				infinite/eternal lifetype of cached elements, set: timeToLiveSec = timeToIdleSec = 0.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="tns:AbstractPdpExtension">
				<xs:attribute name="timeToLiveSec" use="required">
					<xs:annotation>
						<xs:documentation>The maximum number of seconds an element can exist in the cache regardless
							of use. The element expires at this limit and will no longer be returned from the cache. The
							default value is 0, which means no timeToLive (TTL) eviction takes place (infinite lifetime).
						</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:nonNegativeInteger">
							<xs:maxInclusive value="1800"></xs:maxInclusive>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="timeToIdleSec" use="required">
					<xs:annotation>
						<xs:documentation>The maximum number of seconds an element can exist in the cache without
							being accessed. The element expires at this limit and will no longer be returned from the
							cache. The default value is 0, which means no timeToIdle (TTI) eviction takes place (infinite
							lifetime).
						</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:nonNegativeInteger">
							<xs:maxInclusive value="1800"></xs:maxInclusive>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="diskExpiryThreadIntervalSeconds" use="optional" default="120"
					type="xs:positiveInteger">
					<xs:annotation>
						<xs:documentation> how often to run the disk store expiry thread. A large number of 120
							seconds plus is recommended
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="maxElementsInMemory" use="optional" type="xs:nonNegativeInteger"
					default="100">
					<xs:annotation>
						<xs:documentation>the maximum number of elements in memory, before they are evicted. Value
							zero means unlimited.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="overflowToDisk" use="optional" type="xs:boolean" default="false">
					<xs:annotation>
						<xs:documentation>if and only if true, overflow to the disk when you have more than
							maxElementsInMemory of cached
							elements in the memory store
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="maxElementsOnDisk" use="optional" type="xs:nonNegativeInteger"
					default="100">
					<xs:annotation>
						<xs:documentation>the maximum number of elements in memory, before they are evicted. Value
							zero meaning unlimited.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="diskPersistent" use="optional" type="xs:boolean" default="false">
					<xs:annotation>
						<xs:documentation>if and only if true, keep cached elements stored on the disk when the JVM is
							stopped, for later recovery
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="memoryStoreEvictionPolicy" type="tns:CacheMemoryStoreEvictionPolicy"
					use="optional" default="LRU">
					<xs:annotation>
						<xs:documentation>
							Policy that will be enforced upon reaching the maxElementsInMemory limit.
							Default policy is LRU.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AbstractPolicyFinder" abstract="true">
		<xs:annotation>
			<xs:documentation>
				Attribute Finder base type. All 'Policy Finder Modules' should extend this
				type.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="tns:AbstractPdpExtension"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AbstractResourceFinder" abstract="true">
		<xs:annotation>
			<xs:documentation>
				Resource Finder base type. All 'Resource Finder Modules' should extend this
				type.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="tns:AbstractPdpExtension"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
</xs:schema>
