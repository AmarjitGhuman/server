<project name="authzforce-upgrader" default="upgrade" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:ac="antlib:net.sf.antcontrib">

	<!-- here is the version of ivy we will use. change this property to try a newer 
         version if you want -->
	<property name="ivy.install.version" value="2.4.0" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	<property name="old.install.dir" value="../test/authzforce-4.2.0" description="Old Authzforce (4.2.0) installation directory that contains 'conf' and 'data' folders (e.g. /opt/authzforce)" />
	<property name="new.install.dir" value="../../target/server" description="Current Authzforce (>= 4.3.0) installation directory that contains 'conf' and 'data' folders (e.g. /opt/authzforce)" />

	<!-- PDP properties (may be overridden by Java system properties): 
	Possible values for 'pdp.request.filter':
			urn:thalesgroup:xacml:request-filter:default-lax (default value)
			urn:thalesgroup:xacml:request-filter:default-strict
			urn:oasis:names:tc:xacml:3.0:profile:multiple:repeated-attribute-categories-lax
			urn:oasis:names:tc:xacml:3.0:profile:multiple:repeated-attribute-categories-strict
	-->
	<property name="pdp.max.var.ref.depth" value="10" />
	<property name="pdp.max.policy.ref.depth" value="10" />
	<property name="pdp.request.filter" value="urn:thalesgroup:xacml:request-filter:default-lax" />


	<target name="download-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}" />
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="installing ivy..." />
		<get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
	</target>

	<!-- ================================= 
          target: install-ivy         
            this target is not necessary if you put ivy.jar in your ant lib directory
            if you already have ivy in your ant lib, you can simply remove this
            target and the dependency the 'go' target has on it
         ================================= -->
	<target name="install-ivy" depends="download-ivy" description="--> install ivy">
		<!-- try to load ivy here from local ivy dir, in case the user has not already dropped
    	      it into ant's lib dir (note that the latter copy will always take precedence).
    	      We will not fail as long as local lib dir exists (it may be empty) and
    	      ivy is in at least one of ant's lib dir or the local lib dir. -->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<macrodef name="saxon-xslt">
		<attribute name="basedir" />
		<attribute name="destdir" />
		<attribute name="includes" />
		<attribute name="style" />
		<sequential>
			<xslt basedir="@{basedir}" destdir="@{destdir}" style="@{style}" includes="@{includes}" extension=".xml" classpathref="lib.path.id">
				<!-- parameters used by pdp-upgrade.xsl -->
				<param name="basedir" expression="@{basedir}" />
				<param name="maxVariableRefDepth" expression="${pdp.max.var.ref.depth}" />
				<param name="maxPolicyRefDepth" expression="${pdp.max.policy.ref.depth}" />
				<param name="requestFilter" expression="${pdp.request.filter}" />
				<!--
        			    		http://www.saxonica.com/html/documentation/using-xsl/xsltfromant.html
        			    		-->
				<factory name="net.sf.saxon.TransformerFactoryImpl">
					<!-- 
        							For a full list of feature names,
        							for latest version of Saxon,
        							 see http://www.saxonica.com/html/documentation/configuration/config-features.html or http://www.saxonica.com/html/documentation/javadoc/net/sf/saxon/lib/FeatureKeys.html
        							 for version 9.0, see http://www.saxonica.com/documentation9.0/javadoc/net/sf/saxon/FeatureKeys.html
        							 
        							 More info on using XSLT task with Saxon 9:
        							 http://www.saxonica.com/documentation9.0/using-xsl/xsltfromant.html
        							-->
					<!-- Using a SAXON configuration file
        							<attribute name="http://saxon.sf.net/feature/configuration-file" 
        							               value="config-de.xml"/>
        							               -->

					<!--
					<attribute name="http://saxon.sf.net/feature/traceListenerClass" value="net.sf.saxon.trace.XSLTTraceListener" />
					-->
					<!-- xsltSchemaAware available only in proprietary versions of Saxon (Professional/Enterprise) -->
					<!--<attribute name="http://saxon.sf.net/feature/xsltSchemaAware" value="true" />
					<attribute name="http://saxon.sf.net/feature/schema-validation-mode" value="strict" />
					<attribute name="http://saxon.sf.net/feature/xsd-version" value="1.1" />
					-->
					<!--ignoreSAXSourceParser is necessary so parsers defined below are used
        							            instead of ones passed by ant-->
					<!--
					<attribute name="http://saxon.sf.net/feature/ignoreSAXSourceParser" value="true" />
					-->
				</factory>
			</xslt>
		</sequential>
	</macrodef>

	<target name="upgrade-domain-tmpl" description="Upgrade domain template">
		<property name="old.domain.tmpl.path" value="${old.install.dir}/conf/domain.tmpl" />
		<property name="new.domain.tmpl.path" value="${new.install.dir}/conf/domain.tmpl" />
		<echo message="Upgrading domain template directory '${old.domain.tmpl.path}' --> '${new.domain.tmpl.path}'" />
		<!-- Clean directory 'policies' before we set the root policy from old domain template-->
		<delete includeemptydirs="true">
			<fileset dir="${new.domain.tmpl.path}/policies" includes="**/*" />
		</delete>

		<!-- Handle root policy, ref policies, attribute providers and PDP configuration using them in domain template directory -->
		<saxon-xslt basedir="${old.domain.tmpl.path}" destdir="${new.domain.tmpl.path}" includes="pdp.xml" style="domain-pdp-upgrade.xsl" />
	</target>

	<target name="upgrade-domain" description="Upgrade domain">
		<basename property="domain.dir.name" file="${old.domain.dir.path}" />
		<property name="new.domain.dir.path" value="${new.install.dir}/data/domains/${domain.dir.name}" />
		<echo message="Upgrading domain directory '${old.domain.dir.path}' --> '${new.domain.dir.path}'" />

		<mkdir dir="${new.domain.dir.path}" />

		<!-- Upgrade domain properties -->
		<saxon-xslt basedir="${old.domain.dir.path}" destdir="${new.domain.dir.path}" includes="properties.xml" style="domain-properties-upgrade.xsl" />

		<!-- Handle root policy, ref policies, attribute providers and PDP configuration using them -->
		<saxon-xslt basedir="${old.domain.dir.path}" destdir="${new.domain.dir.path}" includes="pdp.xml" style="domain-pdp-upgrade.xsl" />
	</target>

	<!-- ================================= 
          Main target
         ================================= -->
	<!--
	<target name="upgrade" depends="install-ivy, generate-src" 
            description=" resolve dependencies and run the project: upgrade">-->
	<target name="upgrade" depends="install-ivy" description=" --> resolve dependencies and run the project: upgrade">
		<echo message="using ivy to resolve dependencies..." />
		<!--
		http://www.codetab.org/apache-ivy-tutorial/apache-ivy-cachepath-and-retrieve/
		Default ivy settings:  
		ivy.project.dir = ${basedir}
		ivy.lib.dir = ${ivy.project.dir}/lib
		ivy.retrieve.pattern = ${ivy.lib.dir}/[artifact]-[revision].[ext]
		
		 ivy retrieve - default pattern = ${ivy.retrieve.pattern}
    Sync set to true will ensure that any extra files in the lib directory is deleted.
    Type set to jar tells ivy to copy only jar artifacts. Source and javadoc artifacts are ignored.
		-->
		<ivy:retrieve sync="true" type="jar,bundle" pathId="lib.path.id" />

		<!--
		<echo message="compiling..."/>
        <mkdir dir="${build.dir}" />
        <javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.path.id" />
        
		<echo>
We are now ready to execute our simple program with its dependency on commons-lang.
Let's go!
		</echo>
        <java classname="example.Hello">
            <classpath>
                <path refid="lib.path.id" />
                <path location="${build.dir}" />
            </classpath>
        </java>
        -->

		<!-- inheritrefs="true" is required to pass ref 'lib.path.id' to tasks 'upgrade-domain-tmpl' and 'upgrade-domain' -->
		<antcall target="upgrade-domain-tmpl" description="Upgrade domain template directory" inheritall="true" inheritrefs="true" />
		<ac:foreach target="upgrade-domain" param="old.domain.dir.path" inheritall="true" inheritrefs="true">
			<path>
				<!-- includes parameter prevents recursive listing -->
				<dirset dir="${old.install.dir}/data/domains" includes="*" />
			</path>
		</ac:foreach>
	</target>

	<!-- ================================= 
          target: generate-src
            'Generates' the class source. It actually just echo a simple java 
            source code to a file. In real life this file would already be
            present on your file system, and this target wouldn't be necessary.
         ================================= -->
	<!--
	<target name="generate-src">
		<mkdir dir="${src.dir}/example" />
		<echo file="${src.dir}/example/Hello.java">
package example;

import org.apache.commons.lang.WordUtils;

public class Hello {
    public static void main(String[] args) {
        String  message = "hello ivy !";
        System.out.println("standard message : " + message);
        System.out.println("capitalized by " + WordUtils.class.getName() 
                                + " : " + WordUtils.capitalizeFully(message));
    }
}
        </echo>
	</target>
-->

	<!-- ================================= 
          target: clean              
         ================================= -->
	<target name="clean" description="--> clean the project">
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${src.dir}" />
			<fileset dir="${build.dir}" />
		</delete>
	</target>

	<!-- ================================= 
          target: clean-ivy              
         ================================= -->
	<target name="clean-ivy" description="--> clean the ivy installation">
		<delete dir="${ivy.jar.dir}" />
	</target>

	<!-- ================================= 
          target: clean-cache              
         ================================= -->
	<target name="clean-cache" depends="install-ivy" description="--> clean the ivy cache">
		<ivy:cleancache />
	</target>
</project>
