== Overview ==

The initial requirement for the architecture presented here is the following: some FI-Ware Use Case project applications need to invoke APIs provided by some Generic Enablers available on the FI-WARE testbed (Repository, Marketplace, Location Service…), in order to access resources of an end-user. Such access would require approval from the end-user and may be restricted by security policies that are either global to the testbed, or targeting the GEs providing the resources (resource services), or targeting the organization that the end-user (resource owner) belongs to, if any.

Besides, it is strongly recommended that the privacy of the end-user be preserved. In particular, the user – and/or the user’s organization - must be able to control which third-party applications may have access to which of his/her data, for which duration, etc. Each such access must be auditable, as required by various regulations or internal policies. Furthermore, the third-party applications should not have knowledge of the user’s credentials (typically login and password) to get access on the user’s behalf. Last but not least, users should be able to revoke access from all or specific third-party applications at will, without having to change their password.

On the figure below, Service GEs provide APIs to Client Applications for accessing specific resources of the user. The IdM GE(s) (Identity Management Generic Enablers) provides identity management and authentication for users and client applications.

[[Image:AccessControlGE.BusinessRequirement.png|||Business Requirement]]

== Basic Concepts ==

=== Example Scenario ===

The basic concepts come from the OAuth 2 [OAuth2] and XACML 2.0 [XACML2] standards illustrated by the sample scenario below.

[[Image:AccessControlGE.Sample.Scenario.png|||Sample Scenario]]

=== (OAuth) Resource Owner ===
The Resource Owner, also referred to as the End-User is the entity that owns resources on a Resource Server, typically the End-User of the client application. The Resource Owner may delegate resource access to a third-party - the Client Application (see next section) - with certain restrictions, e.g. limited scope, time period.

The Resource Owner must be registered in the IdM Generic Enabler.

=== (OAuth) Client Application ===
The Client Application is the third-party from the Resource Owner's point of view, that is requesting access to the resources.

The Client Application must be registered in the IdM Generic Enabler.

=== (OAuth) Resource Server ===
The Resource Server, also referred to as the Target Service (or Service GE in FI-WARE) is the server hosting the resources that the Client Application requests access to.

The Resource Server must be registered in the IdM Generic Enabler.

=== Identity Management GE Components ===
For available implementations, see DT [[Global Customer Platform]] and NSN [[Identity Management|One-IDM]].

==== OAuth Authorization Endpoint ====

This is the endpoint where client applications redirect users to for authorization grant and get an authorization code in return. This authorization code represents the user's approval of the client app's request to access their resources. Then, the client app can use the authorization code to request an access token from the Token Endpoint (see below). See also the ''Authorization Endpoint'' section in the OAuth 2.0 standard.

This endpoint is implemented by the IdM Generic Enabler (NSN/DT).

==== OAuth Token Endpoint ====
The Token Endpoint issues access tokens to Client Applications provided that they authenticate successfully and present a valid authorization code. Client Applications need such access tokens to access the Resource Servers.

=== XACML Access Control Asset ===
For available implementations, see Thales [[Access Control Asset]].

==== Policy Decision Point (PDP) ====
The PDP provides authorization decisions based on various attributes and XACML policies. Attributes may come from the access request context as provided by PEPs (see below), such as the request URL, the HTTP method and especially the OAuth access token in the Authorization header; from this token, the PDP is able to get token-related attributes (the resource owner a.k.a end-user ID, the client ID, etc.) .from the Attribute Provider (see above), such as user attributes (clearance level, role, location, etc.), or the environment such as current time.

This endpoint is implemented by the Thales RBAC/XACML asset.

==== Policy Administration Point (PAP) ====
The PAP provides an interface for policy administrators to manage XACML policies to be enforced by the PDP.

This endpoint is implemented by the Thales XACML asset.

==== Policy Repository (PRP) ====
The XACML PRP is only used internally for storing policies managed by the PAP and retrieved by the PDP for enforcement.

It is part of the Thales XACML asset.

==== Policy Enforcement Point (PEP) ====
The PEP protects the Resource Server (Service GEs in the context of FIWARE) from unauthorized access. The PEP can be deployed as a security proxy that intercepts all HTTP(S) traffic to the Service GE. Access is denied or permitted depending on the XACML PDP’s decision. The PEP forwards information about the API request (URL, HTTP method, HTTP headers, etc.) to the PDP, including the OAuth access token which the PDP can use to get information about the client application, user and the token scope (user-approved permissions).

== Main interactions ==

From the user and the client application’s perspective, the main interactions are the same as described in the OAuth 2.0 standard, section 1.2. From the Resource Server’s perspective, the OAuth token validation and API request authorization may be delegated to the PEP, so that the integration effort on the Resource Server is minimal.

The main interactions are illustrated by the figure below.

[[Image:AccessControlGE.SolutionOverview.png|||Main interactions]]

For further details on the OAuth interactions with the IdM GEs, please refer to [https://forge.fi-ware.eu/plugins/mediawiki/wiki/fiware/index.php/FIWARE.OpenSpecification.Security.IdentityManagement FIWARE Open Specification of Identity Management Generic Enabler] by NSN and DT.

== Basic Design Principles ==
* The architecture complies with the OAuth and XACML standard.
* All APIs (IdM OAuth APIs, XACML Policy Management API, XACML PDP API, Resource Server APIs) are RESTful APIs.
* Format of access control policies managed by the PAP and enforced by the PDP is defined by the XACML standard.
* The PDP computes access decisions based on above policies according to the XACML standard rules for policy evaluation (XACML engine).
* The PDP and PAP should support multi-tenancy.
* We allow two options for the PEP deployment:
*# Use a HTTP Proxy as PEP, such as the one provided by Thales [[Access Control Asset]]. In this case, the owner of the Resource Server must provide the necessary information for integration between the PEP and the Resource Server.
*# Use a PEP built in the Resource Server. In this case, the PEP implementation is the responsibility of the owner of the Resource Server. This PEP would have to integrate with the IdM Generic Enabler for OAuth token validation, and the XACML PDP for requesting authorization decisions.

== References ==
* [[FIWARE.OpenSpecification.Security.IdentityManagement]]
* [OAuth2] [http://tools.ietf.org/html/draft-ietf-oauth-v2-31 OAuth 2.0 Authorization Framework]
* [XACML2] [https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=xacml#XACML20 XACML 2.0]