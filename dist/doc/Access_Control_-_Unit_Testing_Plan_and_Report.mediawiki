== Common Information about tests ==

The Access Control GE combines the IdM GE and Thales Access Control Asset. For Unit Testing Plan and Report of the IdM GE, see [[Identity Management - Unit Testing Plan and Report]]. The rest of the document addresses unit testing of the Access Control Asset which is simply referred to as ''Authorization Service'' from this point forward.

The tests are available as a SoapUI project. After following [[Access Control - Installation and Administration Guide]] and checking that everything is up and running, configure SoapUI to use the Superadmin keystore generated during the installation, in File > Preferences > SSL Settings. Then import the SoapUI project file ''ThalesAuthzService-soapui-project.xml'' from the software package, and change the Service Endpoint and Base Path in Service properties menu to match the server URL and webapp context root of your installation of the Authorization Service.

Below is an overview of the SoapUI project and associated test suite including one SoapUI test case for each unit test.

[[File:ThalesAuthzServiceSoapUI.png|center|Authorization Service Testing - SoapUI Project|700px]]

== Unit Test 1 ==

=== Tested Features ===
This Unit Test involves the following feature: 
* [[FIWARE.Feature.Security.AccessControlGE.OAuth2APIAccessControl.Multi-Tenant.XACML-Compliant.Attribute-Based.Access.Control.Policy.Administration.PAP]]

=== Test Description ===

The test of the PAP API (Policy Administration Point) consists of the following steps:
# Create a new policy domain that would represent a new tenant;
# Get the content of newly created policy domain (properties and link(s) to child resource(s), e.g. policy set);
# Get the policy set of newly created domain (XACML PolicySet);
# Update the policy set;
# Get policy set again for update checking;
# Delete the domain.

''' Test Procedure '''

Run the SoapUI Test Case ''PAP Test Case''.

''' Expected result '''

The test case must finish with status <code>FINISHED</code> (green color). If it fails, it will show ''Test failed'' (red color) with a message about the violated assertion.

== Unit Test 2 ==

=== Tested Features ===
This Unit Test involves the following features: 

* [[FIWARE.Feature.Security.AccessControlGE.OAuth2APIAccessControl.Multi-Tenant.XACML-Compliant.Attribute-Based.Access.Control.Policy.Decision.Engine.PDP]]

* [[FIWARE.Feature.Security.AccessControlGE.OAuth2APIAccessControl.IdM_GE_OAuth_API_Support_In_PDP]]

=== Test Description ===

This test consists of the following steps:
# Create a new policy domain that would represent a new tenant;
# Update the attribute finders that extract OAuth info from the access token in the XACML request
# Update the policy set of the newly created domain;
# Requests a policy decision (XACML request);
# Delete the domain.

''' Test Procedure '''

Run the SoapUI Test Case ''PDP ABAC Test Case''.

''' Expected Result '''

The test case must finish with status <code>FINISHED</code> (green color). If it fails, it will show ''Test failed'' (red color) with a message about the violated assertion.

== Unit Test 3 ==

=== Tested Features ===
This Unit Test involves the following feature: 

*[[FIWARE.Feature.Security.AccessControlGE.OAuth2APIAccessControl.Hierarchical_RBAC_Policy_Administration_API_and_Enforcement]]

=== Test Description ===

This test consists of the following steps:
# Create a new policy domain that would represent a new tenant;
# Update the Permission PolicySets for the roles in the newly created domain;
# Update the root RBAC PolicySet that includes the Role PolicySets pointing to the above Permission PolicySets;
# Requests a policy decision (XACML request) for a user having one of the roles defined previously;
# Delete the domain.

''' Test Procedure '''

Run the SoapUI Test Case ''PDP RBAC Test Case''.

''' Expected Result '''

The test case must finish with status <code>FINISHED</code> (green color). If it fails, it will show ''Test failed'' (red color) with a message about the violated assertion.

== Unit Test 4 ==

=== Tested Features ===
This Unit Test involves the following feature: 

* [[FIWARE.Feature.Security.AccessControlGE.OAuth2APIAccessControl.IdM.GE.OAuth.API.Support.In.Security.Proxy.PEP]]

''Since v3.1.2.''

=== Test Description ===


''' Preliminary setup '''

You need to do the following extra steps before testing:
# Extract file 'authzforce-sample-pep-proxy-webapp-XXX.war' from the software package (XXX = version), rename it to 'samplepep.war' and deploy it to Tomcat 7.x or Glassfish 3.x locally and listening on port 7080. For Tomcat 7.x, Metro must be previously installed: https://metro.java.net/2.1/ . This is the '''PEP proxy webapp''' protecting the '''sample storage service''' deployed in the next step. If you want to use a different host or port for deployment, select 'SampleStorageService' on the left in soapUI, add a new endpoint in 'Service Endpoints' tab accordingly, select it and assign 'All Test Requests' to it.
# Extract file 'authzforce-sample-pep-filter-webapp-XXX.war' from the software package (XXX = version), rename it to storage-service.war and deploy it to your favorite servlet container locally and listening on port 8080. This is a basic '''sample storage service''' used for testing only. If you want to use a different host or port for deployment, change the 'targetURL' attribute of the root XML element in file 'WEB-INF/classes/sspg-pep.xml' of the PEP proxy webapp deployed in the previous step accordingly, and reload the PEP proxy webapp.
# Download and unzip the SCIM Reference Implementation from UnboundID (zip): https://code.google.com/p/scimsdk/ .


This test consists of the following steps:
# Assign Superadmin role to user 'bjensen' via standard REST API of a SCIM Service Provider;
# Assign Admin role to user 'jsmith' on specific resource domain called 'jsmithshare' via the same API;
# Create a new policy domain;
# Update attribute finders of this domain's PDP to query the user roles from the SCIM SP;
# Update the domain's PolicySet to assign proper permissions to previously mentioned Superadmin and Admin role (and default deny policy) for access to the sample storage service;
# Test various requests against the sample storage service via the PEP proxy, as different users with different roles, to check that the access control policy is enforced as expected;
# Delete the policy domain.

''' Test Procedure '''

Run the SoapUI Test Case ''PEP Test Case''.

''' Expected Result '''

The test case must finish with status <code>FINISHED</code> (green color). If it fails, it will show ''Test failed'' (red color) with a message about the violated assertion.

== Unit Test 5 ==

=== Tested Features ===
This Unit Test involves the following features: 

* [[FIWARE.Feature.Security.AccessControlGE.OAuth2APIAccessControl.Integration.with.NSN.IdM.GEi]]
* [[FIWARE.Feature.Security.AccessControlGE.OAuth2APIAccessControl.IdM.GE.OAuth.API.Support.for.Authorization.Based.on.Client.App.Attributes]]

''Since v3.2.3.''

=== Test Description ===

This test consists of the following steps:
# Create a new policy domain;
# Update the domain's PolicySet;
# Update attribute finders of this domain's PDP to query the OAuth token info such as the OAuth resource owner's and OAuth Client Application's attributes, from NSN Digital Self (IdM GEi)'s Token API, with OAuth token as request parameter;
# Test various XACML requests with an OAuth token;
# Delete the policy domain.

''' Test Procedure '''

Run the SoapUI Test Case ''PDP_NSN_DigitalSelf_Integ_TestCase''.

''' Expected Result '''

The test case must finish with status <code>FINISHED</code> (green color). If it fails, it will show ''Test failed'' (red color) with a message about the violated assertion.

== Unit Test 6 ==

=== Tested Features ===
This Unit Test involves the following feature: 

* [[ FIWARE.Feature.Security.AccessControlGE.OAuth2APIAccessControl.XACML.Multiple.Resource.Profile.PDP ]]

''Since v3.2.3.''

=== Test Description ===

This test consists of the following steps:
# Create a new policy domain;
# Update the domain's PolicySet;
# Test a XACML request with multiple Resource IDs;
# Delete the policy domain.

''' Test Procedure '''

Run the SoapUI Test Case ''PDP_MultiResourceProfile_TestCase''.

''' Expected Result '''

The test case must finish with status <code>FINISHED</code> (green color). If it fails, it will show ''Test failed'' (red color) with a message about the violated assertion.

== Unit Test 7 ==

=== Tested Features ===
This Unit Test involves the following feature: 

* [[FIWARE.Feature.Security.AccessControlGE.OAuth2APIAccessControl.Accounting]]

''Since v3.3.3.''

=== Test Description ===

This test consists of the following steps:
# Create a new policy domain;
# Update the domain's PolicySet;
# Check the access log before doing any request;
# Test a XACML request with multiple Resource IDs;
# Check for the new line in the access log for the new request;
# Delete the domain. 


''' Test Procedure '''

Run the SoapUI Test Case ''PDP_Accounting_TestCase''.

''' Expected Result '''

The test case must finish with status <code>FINISHED</code> (green color). If it fails, it will show ''Test failed'' (red color) with a message about the violated assertion.
