= Introduction =
In the rest of document, the Thales Access Control GE implementation will be simply referred to as 'Authorization Server'.

= System Requirements =
* Operating System: Linux (Ubuntu Server 12.04/14.04 LTS recommended) i686/x86_64
* Java Platform: JDK 7 (JRE is not enough), Glassfish Server 3.x, OpenDJ 2.5-Xpress1 or later
* RAM: 4GB min
* CPU: 2.6 GHz min
* Disk space: 10 GB min
* An [[FIWARE.OpenSpecification.Security.IdentityManagement|Identity Management]] instance must be reachable in the environment if IdM integration is required, especially for OAuth.

= Installation =
== Operating System Setup ==
It is strongly recommended that the system clock be synchronized with the same time server as the IdM GE or with a close stratum if using NTP. This is critical for checking the validity of OAuth access tokens generated by the IdM GE.

== Certificate Authority Setup ==
If you have a Certificate Authority already, you can skip this section.
This section is about creating a local Certificate Authority (CA) for issuing certificates of the Authorization Server and clients, for authentication, integrity and confidentiality purposes. '''This procedure requires using a JDK 1.7 or later.'''
(For the sake of simplicity, we do not use a subordinate CA, although you should for production, see [http://docs.oracle.com/javase/7/docs/technotes/tools/windows/keytool.html#genkeypairCmd keytool command example], use the pathlen parameter to restrict number of subordinate CA, pathlen=0 means no subordinate.)
# Generate the CA keypair and certificate on the platform where the Authorization Server is to be deployed (change the validity argument to your security requirements, example here is 365 days):
#: <pre>$ keytool -genkeypair -keystore taz-ca-keystore.jks -alias taz-ca -dname "CN=Thales AuthzForce CA, O=FIWARE" -keyalg RSA -keysize 2048 -validity 365 -ext bc:c="ca:true,pathlen:0"</pre>
# Export the CA certificate to PEM format for easier distribution to clients.
#: <pre>$ keytool -keystore taz-ca-keystore.jks -alias taz-ca -exportcert -rfc > taz-ca-cert.pem</pre>

== Application Server Setup (Glassfish) ==
Glassfish requires Java. If you don't have JDK 7 installed, read the next section; if you have, skip it.
=== JDK (Java) Installation===
You can refer to the JDK installation instructions from [http://doc.ubuntu-fr.org/java#depuis_le_ppa Ubuntu Java documentation]. For Ubuntu < 12.04LTS, we strongly recommend [https://library.linode.com/upgrading/upgrade-to-ubuntu-12.04-precise#sph_upgrading-from-ubuntu-10-04-lts upgrading to 12.04LTS], then possibly [https://help.ubuntu.com/community/UpgradeNotes#From_12.04_LTS_to_14.04_LTS from 12.04LTS to 14.04LTS] before you go on. Once you are running 12.04LTS/14.04LTS, the installation steps are summarized below:
<pre>
$ sudo add-apt-repository ppa:webupd8team/java
</pre>
If you have 'add-apt-repository: command not found' error, try again after installing one of the following packages, depending on your version of Ubuntu:
* Ubuntu 12.04LTS:
*: <pre>$ sudo apt-get install python-software-properties</pre>
* Ubuntu 14.04LTS:
*: <pre>$ sudo apt-get install software-properties-common</pre>

Then go on:
<pre>
$ sudo apt-get update
$ sudo apt-get install oracle-java7-installer
</pre>

=== Server Installation===
If you already have a Glassfish 3.x server installed, you can skip this section. If you do not, read on.

Download ''glassfish-unix.sh'' file from Glassfish website, and run it with sudo:
<pre>
$ wget http://download.java.net/glassfish/3.1.2.2/release/glassfish-3.1.2.2-unix.sh 
$ sudo sh glassfish-3.1.2.2-unix.sh
</pre>

If you have errors running the script above, in particular because you don't have a graphical environment (no X server), try the -s option to run in silent mode instead. In this case, you need to supply a glassfish install template as input. Use the template given in example 1-2 of [http://docs.oracle.com/cd/E18930_01/html/821-2427/ghmva.html Glassfish Installation Guide - Performing a Silent Mode Installation], or the one below, and fill in the properties with your desired settings, save it to file say ''glassfish-install-template.txt'' and run the script:
<pre>
$ cat glassfish-install-template.txt

Domain.Configuration.ADMIN_PASSWORD=changeit
Domain.Configuration.ADMIN_PASSWORD_REENTER=changeit
Domain.Configuration.ADMIN_PORT=4848
Domain.Configuration.ADMIN_USER=admin
Domain.Configuration.DOMAIN_NAME=domain1
Domain.Configuration.HTTP_PORT=8080
InstallHome.directory.INSTALL_HOME=/opt/glassfish3
UpdateTool.Configuration.ALLOW_UPDATE_CHECK=false
UpdateTool.Configuration.BOOTSTRAP_UPDATETOOL=false
UpdateTool.Configuration.PROXY_HOST=
UpdateTool.Configuration.PROXY_PORT=

$ sudo sh glassfish-3.1.2.2-unix.sh -s -a glassfish-install-template.txt
</pre>

When running the above command on x86_64 platforms, you may encounter one of the following errors:
* SEVERE INTERNAL ERROR: /usr/lib/jvm/java-7-oracle/jre/lib/amd64/xawt/libmawt.so: libXrender.so.1: cannot open shared object file: No such file or directory
* SEVERE INTERNAL ERROR: /usr/lib/jvm/java-7-oracle/jre/lib/amd64/xawt/libmawt.so: libXtst.so.6: cannot open shared object file: No such file or directory
* SEVERE INTERNAL ERROR: /usr/lib/jvm/java-7-oracle/jre/lib/amd64/xawt/libmawt.so: libXi.so.6: cannot open shared object file: No such file or directory
In this case, do the following before you try again:
<pre>
$ sudo apt-get install libxrender1 libxtst6 libxi6
</pre>

Start Glassfish:
<pre>
$ sudo /opt/glassfish3/bin/asadmin start-domain
</pre>

=== Server Preliminary Setup===
Make sure your Glassfish server is running on JDK 1.7 or later. If you have multiple JDKs installed besides JDK 1.7, set the Glassfish domain's <code>java_home</code> property to the specific Oracle JDK 1.7 for the domain
([http://docs.oracle.com/cd/E26576_01/doc.312/e24928/domains.htm more info]):
<pre>$ asadmin set "server.java-config.java-home=/usr/lib/jvm/jdk1.7.0_25"</pre>

Then run the following command on the Glassfish domain ([http://cxf.apache.org/docs/jax-rs-deployment.html more info]):
<pre>$ asadmin create-jvm-options -Dcom.sun.enterprise.overrideablejavaxpackages=javax.ws.rs,javax.ws.rs.core,javax.ws.rs.ext</pre>

Restart Glassfish to apply changes above (if you have multiple domains, you have to specify the domain where the GE will be deployed, otherwise the default 'domain1' is used like in this example):
<pre>$ asadmin restart-domain</pre>


'''''N.B.: in the next sections, <code>${GLASSFISH_DOMAIN_DIR}</code> will be referred to as the path to the directory of the Glassfish domain you are working on. For a fresh Glassfish installation (see [[#Server_Installation]]), the only domain created by default is 'domain1'; therefore, the path is <code>${GLASSFISH_DIR}/glassfish/domains/domain1</code>, where <code>${GLASSFISH_DIR}</code> is the root directory where you chose to install Glassfish. For instance, if you installed it using an installation template, <code>${GLASSFISH_DIR}</code> is same as property <code>InstallHome.directory.INSTALL_HOME</code>.'''''

=== Server Security Setup ===
Follow the ''Security Guide'' of your respective Glassfish version. In particular, do the following:
* Remove Glassfish homepage (<code>${GLASSFISH_DOMAIN_DIR}/docroot/index.html</code>) or replace it with non-sensitive information. Any information identifying specifically your running software (e.g. the server product such as Glassfish, version, etc.) or hardware is usually considered sensitive in this context.
* Enable secure admin, ONLY if you want remote access to the Glassfish admin GUI:
*: <pre>$ asadmin enable-secure-admin</pre>
* Disable XPoweredBy header on all HTTP listeners:
*: To find the available HTTP listeners to modify:
*: <pre>$ asadmin get server.network-config.protocols.protocol.*</pre>
*: Disable the header for each one:
*: <pre>$ asadmin set server.network-config.protocols.protocol.http-listener-1.http.xpowered-by=false</pre>
*: <pre>$ asadmin set server.network-config.protocols.protocol.http-listener-2.http.xpowered-by=false</pre>
* Change the Server header:
*: <pre>$ asadmin create-jvm-options -Dproduct.name="FIWARE Authorization Server"</pre>
* ... or remove the Server header:
*: <pre>$ asadmin create-jvm-options -Dproduct.name=""</pre>
* Change the master password of the Glassfish domain (where the Authorization Server webapp is to be deployed) if not changed from the default values ('changeit' for Glassfish)
*: <pre>$ asadmin stop-domain</pre>
*: <pre>$ asadmin change-master-password domain1</pre>

=== Server Certificate Setup ===
By default, Glassfish uses a self-signed server certificate for SSL connections, generated during the installation. You can stick with it and skip the rest of this section, but only for testing. For production, it is strongly recommended to generate your own CA-signed certificate, as detailed below.

# On the Authorization Server platform, generate the Authorization Server keypair, you must change the dname parameter to the domain name that all users will use to access the server over TLS transport:
#: <pre>$ keytool -genkeypair -keystore taz-server-keystore.jks -alias taz-server -dname "CN=taz.example.com, O=FIWARE" -keyalg RSA -keysize 2048</pre>
# Make the server certificate signed by the CA, typically by sending a CSR (Certificate Signing Request) to the CA. For example, with the CA created in previous section, first make the CSR:
#: <pre>$ keytool -certreq -keystore taz-server-keystore.jks -alias taz-server -file taz-server.csr</pre>
# Make the CA sign the server certificate (change CA keystore password accordingly, and the validity period according to your security requirements):
#: <pre>$ keytool -gencert -keystore taz-ca-keystore.jks -alias taz-ca -infile taz-server.csr -validity 365 -ext ku:c=dig,keyEncipherment -rfc -outfile taz-server-cert.pem</pre>
# Import the CA certificate into the server truststore
#: <pre>$ keytool -importcert -keystore taz-server-keystore.jks -file taz-ca-cert.pem -alias taz-ca -noprompt</pre>
# Import the server key and certificate signed by the CA into the server keystore:
#: <pre>$ keytool -importcert -keystore taz-server-keystore.jks -file taz-server-cert.pem -alias taz-server</pre>
# Create the server truststore that will be used to validate certificates of clients accessing the server (CA certificate only, truststore is created on-the-fly by the keytool command):
#: <pre>$ keytool -importcert -noprompt -alias taz-ca-cert -file taz-ca-cert.pem -keystore taz-server-truststore.jks</pre>
# Copy the new server truststore to the Glassfish domain's configuration directory:
#: <pre>$ cp taz-server-truststore.jks ${GLASSFISH_DOMAIN_DIR}/config</pre>
# Set the server's truststore password to the same master password set with ''change-master-password'' command in the previous section (DO NOT SET THE TRUSTSTORE PASSWORD WITH JVM OPTION 'javax.net.ssl.trustStorePassword' AS THE MASTER PASSWORD WILL BE USED INSTEAD ANYWAY):
#: <pre>$ cd ${GLASSFISH_DOMAIN_DIR}/config</pre>
#: <pre>$ keytool -storepasswd -keystore taz-server-truststore.jks</pre>
# Back up Glassfish domain's original keystore (before changing it in the next steps):
#: <pre>$ cp keystore.jks{,.orig}</pre>
# Replace the key for alias 's1as' in the keystore with the one from your keystore 'taz-server-keystore.jks' created in the previous section (use the same password set with <code>change-master-password</code> command in the previous section for the -destkeypass argument):
#: <pre>$ keytool -importkeystore -srckeystore taz-server-keystore.jks -destkeystore keystore.jks -srcalias taz-server -destalias s1as -destkeypass mymasterpass</pre>

=== Server TLS Setup ===
# Set the server's truststore path (DO NOT SET THE TRUSTSTORE PASSWORD WITH JVM OPTION 'javax.net.ssl.trustStore.password' AS THE MASTER PASSWORD WILL BE USED INSTEAD ANYWAY):
#: <pre>$ asadmin start-domain</pre>
#: <pre>$ asadmin delete-jvm-options -Djavax.net.ssl.trustStore=\${com.sun.aas.instanceRoot}/config/cacerts.jks</pre>
#: <pre>$ asadmin create-jvm-options -Djavax.net.ssl.trustStore=\${com.sun.aas.instanceRoot}/config/taz-server-truststore.jks</pre>
# Configure the group assignment of clients authenticated by certificates: 
#: <pre>$ asadmin set server.security-service.auth-realm.certificate.property.assign-groups=authenticated</pre>
# You may want to change the SSL port (default: 8181), for instance to the standard port (443):
#: <pre>$ asadmin set server.network-config.network-listeners.network-listener.http-listener-2.port=443</pre>
# Make sure the server hostname matches the CN of the certificate subject DN.
# Restart Glassfish to apply above changes (''asadmin restart-domain'' cannot be used anymore after changing the master password):
#: <pre>$ asadmin stop-domain</pre>
#: <pre>$ asadmin start-domain</pre>

=== Server Performance Tuning ===
You can find most recommended performance tuning tips and other useful tips for putting Glassfish in production, on the blog [http://jfarcand.wordpress.com/2009/11/27/putting-glassfish-v3-in-production-essential-surviving-guide/ Putting GlassFish v3 in Production: Essential Surviving Guide]. 
In brief:
<pre>
$ asadmin delete-jvm-options -client:-Xmx512m
$ asadmin create-jvm-options \\-server:-XX\\:+AggressiveHeap:-Xmx1400m:-Xms1400m
</pre>

Check whether the host has multiple CPUs (multi-core), e.g. with <code>nproc</code> command on Linux. If it does, run the following command, replacing number '4' in this example with the actual number of CPUs:
<pre>
$ asadmin create-jvm-options -XX\\:ParallelGCThreads=4:-XX\\:+UseParallelOldGC
</pre>

Check whether the JVM is 64-bit with <code>java -version</code>. If the command output mentions "64-Bit", do the following:
<pre>
$ asadmin create-jvm-options -XX\\:+UseCompressedOops
</pre>

Restart the Glassfish domain to apply changes.

For complete tuning, refer to the ''Performance Tuning Guide'' of your respective Glassfish version.
Some useful tips to keep in mind for performance tuning:
* <code>asadmin create-jvm-options</code> command may take multiple options separated by ':' (colon) character;
* If an option to <code>asadmin create-jvm-options</code> already includes a ':' character (e.g. -XX:...), escape it with double '\' (backslash);
* If you get the error "The stack size specified is too small, specify at least..." at JVM startup, increase the value of -Xss option as told (or more);
* If you get the error "Too small initial heap for new size specified" at JVM startup, increase the value of -Xmx/-Xms.

== User and Role Management Setup ==
This section is about configuring an LDAP directory for storing authorized users and user-role assignments required to access the Authorization Server interface. 

=== User Directory Setup ===
Although OpenDJ is given as example in some of the following steps, you can use any other LDAP v3 directory to store user roles. The only specific requirement is that the directory server must provide a mechanism so that, after adding a member (object class 'person') -  to a group entry (object class 'groupOfNames'), a specific attribute in the member's entry is automatically filled in with the new group membership. This is the equivalent to OpenDJ 'isMemberOf' virtual attribute (or OpenLDAP 'memberOf'). See section ''18.1 Virtual Attributes - isMemberOf'' in OpenDJ's ''Administration Guide''.

The following steps assumed you have already a LDAP directory server deployed in your environment. For OpenDJ from ForgeRock, refer to the [http://opendj.forgerock.org/doc/install-guide/ Installation Guide]. For Ubuntu, you can use the deb package available on the OpenDJ Downloads page and follow the [http://opendj.forgerock.org/opendj-server/doc/install-guide/#install-deb installation steps]. In particular, do not forget to run this after installing the package:
<pre>
$ sudo /opt/opendj/setup --cli
$ sudo /opt/opendj/bin/status
</pre>

Now that you have installed the directory server, you need to interact with it to finish the setup. To do so, we can use a LDAP client such as the 'ldapmodify' tool provided by the ''ldap-utils'' package. You can install this package as follows:
<pre>
$ sudo apt-get install ldap-utils
</pre>
In all the next sample LDAP commands in this guide, this is the ''ldapmodify'' tool we are using, and should not be confused with the similar but distinct ''ldapmodify'' tool shipped with OpenDJ which can be run from folder ''/opt/opendj/bin'' after OpenDJ installation. If you still want to use the OpenDJ tool, please adapt the commands given here to make this work. For more help on using OpenDJ ''ldamodify'':
<pre>
$ /opt/opendj/bin/ldapmodify --help
</pre>

Now let's set up the two major directory branches:
<ol>
 <li>If you do not have a base DN setup in the directory, create one, such as 'dc=example,dc=com'. For OpenDJ, this can be done when running the setup command above, or with the Control Panel.</li>
<li>Create a user branch and a role branch (organizationalUnit objectClass), such as 'ou=users' and 'ou=roles', if you do not have one or the other already, in the above directory base:
<pre>
$ cat add-branches.ldif

dn: ou=users,dc=example,dc=com
objectClass: organizationalUnit
ou: users

dn: ou=roles,dc=example,dc=com
objectClass: organizationalUnit
ou: roles

$ ldapmodify -a -H ldap://localhost:389 -D "cn=Directory Manager" -f add-branches.ldif -W
</pre>
</li>
<li>Configure the directory server to enforce user mail uniqueness on the user branch. Example for OpenDJ:
<pre>
$ /opt/opendj/bin/dsconfig create-plugin --port 4444 --hostname localhost --bindDN "cn=Directory Manager" --bindPassword password --plugin-name "Unique mail" --type unique-attribute --set base-dn:ou=users,dc=example,dc=com --set type:mail --set enabled:true --trustAll --no-prompt
</pre>
</li>
<li>If your directory server is not OpenDJ, configure your directory server to enforce an equivalent to OpenDJ 'isMemberOf' mechanism.
</li>
</ol>

=== User Registration ===
For using the API provided by the application, users must connect via HTTPS and authenticate with client certificates signed by the CA mentioned in [[#Certificate Authority Setup]]. In addition, users must be registered in the user database set up in [[#User and Role Management Setup]]. Therefore, to allow a given user to access the API, as an administrator, you must first make his/her signed certificate and register his/her in the user database (LDAP directory in this case).

==== Client Certificate Setup ====
This section is about creating a client certificate signed by the trusted CA for clients - application users - authenticating to the Authorization Server.
<!-- For end-users, send them EMAIL.0.CLIENT.CERT.ENROLLMENT.INSTRUCTIONS.txt for instructions how to do this step. -->
Example with keytool:
# On the client side, generate the client keypair (the dname argument does not matter as it will be overriden by the CA when issuing the certificate, yet you must provide one at this step):
#: <pre>$ keytool -genkeypair -keystore johndoe-taz-client-keystore.jks -alias johndoe-taz-client -keyalg RSA -keysize 2048 -dname "CN=Self Signed"</pre>
# On the client side, generate the client CSR and send it to the CA:
#: <pre>$ keytool -certreq -keystore johndoe-taz-client-keystore.jks -alias johndoe-taz-client -file john.doe-taz-client.csr</pre>
# On the CA/Authorization Server host used in section 'Certificate Authority Setup', make the client certificate signed by the CA using the previously generated client CSR; make the subject DN unique by means of a UUID, for example with OSSP UUID command-line tool (UUID version 1 is recommended for one-time globally unique identifier, with the downside that the generated UUID may disclose information about the host MAC address)
#: <pre>$ keytool -gencert -keystore taz-ca-keystore.jks -alias taz-ca -infile john.doe-taz-client.csr -dname "CN=$(/usr/bin/uuid -v1), OU=Thales AuthzForce Users, O=FIWARE" -validity 365 -rfc -ext ku:c=digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment,keyAgreement -ext eku:c=clientAuth -outfile johndoe-taz-client-cert.pem</pre>
#: '''WARNING:''' It is recommended that the CA keep the client CSR for certificate renewal in the future!
<!-- For end-users, send them back this new certificate PEM and CA certificate PEM in email EMAIL.0.CLIENT.CERT.ENROLLMENT.INSTRUCTIONS.txt. -->
# On the client side, import the CA certificate into the client keystore:
#: <pre>$ keytool -importcert -keystore johndoe-taz-client-keystore.jks -file taz-ca-cert.pem -alias taz-ca -noprompt</pre>
# On the client side, import the signed client certificate into the client keystore:
#: <pre>$ keytool -importcert -keystore johndoe-taz-client-keystore.jks -file johndoe-taz-client-cert.pem -alias johndoe-taz-client</pre>
# On the client side, for clients that do not have native support for JKS (Java keystore), such as most common web browsers, you may export the JKS to PKCS12 format:
#: <pre>$ keytool -importkeystore -srckeystore  johndoe-taz-client-keystore.jks -srcalias johndoe-taz-client -deststoretype PKCS12 -destkeystore johndoe-taz-client-keystore.p12</pre>

==== Registration in the User Database ====
This section is about adding a new application user in the user directory set up in [[#User and Role Management Setup]]. 
Create the user entry (with objectClass 'inetorgperson') with DN 'uid=${CN}' in the user branch created in section [[#User and Role Management Setup]], where <code>${CN}</code> is the value of the CN attribute in the user certificate subject DN (UUID), as defined in previous section [[#Client Certificate Setup]]. For example with user ''John Doe'', you can extract his CN value like this:
<pre>$ openssl x509 -in johndoe-taz-client-cert.pem -subject -noout | grep -oP "(?<=/CN=)[^/]+(?=/?)"

28789263-ed04-4d08-bb42-35ea4950fc79</pre>
Then create the LDIF file with the above result as 'uid' attribute of the new user entry like this:
<pre>
$ cat add-user.ldif

dn: uid=28789263-ed04-4d08-bb42-35ea4950fc79,ou=users,dc=example,dc=com
objectClass: inetOrgPerson
uid: 28789263-ed04-4d08-bb42-35ea4950fc79
cn: John Doe
sn: Doe
givenName: John
mail: john.doe@example.com

$ ldapmodify -a -H ldap://localhost:389 -D "cn=Directory Manager" -W -f add-user.ldif
</pre>

=== Superadmin Role Assignment ===
The Superadmin is responsible for managing the application. In particular, a user must have this role to create or remove policy administration domains - referred simply as domains in the rest of the document - for your end-users (policy administrators and Policy Enforcement Points). Therefore, before you can do anything with the application's API, you must first assign the Superadmin role to one or more users registered by following the previous section [[#User Registration]], and that you want to make Superadmins. 

For example, to assign some user ''John Doe'' the role ''Superadmin'', first create entry ''cn=Superadmin'' with objectClass ''groupOfNames'' under the ''ou=roles'' branch created in section 'User Role Management Setup', if not already created (first ''Superadmin'' user). Then add a 'member' attribute with the above user DN as value to this group entry to finalize the user-role assignment. You can do both at the same time:
<pre>$ cat add-role.ldif

dn: cn=Superadmin,ou=roles,dc=example,dc=com
objectClass: groupOfNames
cn: Superadmin
member: uid=28789263-ed04-4d08-bb42-35ea4950fc79,ou=users,dc=example,dc=com

$ ldapmodify -a -H ldap://localhost:389 -D "cn=Directory Manager" -W -f add-role.ldif
</pre>

The 'member' attribute is multi-valued so that you can have more than one member in such group entries obviously, and therefore one or more Superadmins. Besides this role, you can assign other roles which are restricted to a specific domain. Therefore, we will explain this after deploying the application in the next section [[#Authorization Server Application Setup]], and addressing the creation of new domains with the API in [[#Domain Creation]].

== Authorization Server Application Setup ==
# Download the latest release package from [https://forge.fi-ware.eu/frs/?group_id=23 the FI-WARE PPP Restricted Project website, package "Security-AccessControlGE"], and unzip it (XXX=version):
# Unzip authzforce-fiware-dist-XXX-bin.zip, then you will get a directory called ''authzforce-fiware-dist-XXX''.

''If unzip command is not found, install it and try again:''
<pre>$ apt-get install unzip</pre>


=== Configuration ===
# Deploy the configuration files to Glassfish domain config folder as follows:
#:<pre>$ cp -a authzforce-fiware-dist-XXX/conf ${GLASSFISH_DOMAIN_DIR}/config/authzforce</pre>
# In new file <code>${GLASSFISH_DOMAIN_DIR}/config/authzforce/core-pdp.xml</code>, inside the <code>attributeFinderModule</code> element with attribute <code>class="com.thalesgroup.authzforce.finder.LdapAttributeFinderModule"</code>, replace <code>url</code> value with the URL of the LDAP directory server used in section [[#User and Role Management Setup]]; <code>bindDN</code> and <code>bindPassword</code> with the credentials of a directory server admin account that has read permissions on the user and role branches set up in section [[#User and Role Management Setup]]; and finally, replace all occurrences of <code>dc=example,dc=com</code> in the file with the base DN you have configured in [[#User and Role Management Setup]], for example, if your based DN is ''dc=fiware,dc=eu'':
#: <pre>$ sed -i "s/dc=example,dc=com/dc=fiware,dc=eu/" ${GLASSFISH_DOMAIN_DIR}/config/authzforce/core-pdp.xml</pre>

=== Web Application Deployment ===
# Deploy the war file from the release package to Glassfish server as a web application (<code>XXX</code> = release version).
#: <pre>$ asadmin deploy --name authzforce-XXX --contextroot authzforce --enabled=true authzforce-fiware-dist-XXX/authzforce-fiware-webapp-XXX.war</pre>
#: If you used <code>enabled=false</code> because you wanted to check/modify the webapp content before starting the webapp, you can then enable with command: 
#: <pre>$ asadmin enable authzforce</pre>
# The application requires SSL client certificate authentication. So make sure the web deployment descriptor (<code>web.xml</code>) is properly configured to use realm-name <code>certificate</code> for authentication. Then edit the ''Certificate Realm'' in Glassfish administration console and set the ''Assign-Groups'' property to ''authenticated''. If you want to specify another property value, make sure it matches the <code>group-name</code> of the <code>security-role-mapping</code> defined for role <code>authenticated</code> in the webapp file <code>glassfish-web.xml</code> (same folder as <code>web.xml</code>).

== Policy Domain Management ==

=== The Concept of Policy Domain ===
The application is multi-tenant, i.e. it allows users or organizations to work on authorization policies in complete isolation from each other. In this document, we use the term "domain" instead of "tenant". In this context, a policy domain consists of:
* Various metadata about the domain: ID, name, description;
* The root XACML <PolicySet>;
* Optional <PolicySet>s that may be referenced in <Policy(Set)Reference>s by the aforementioned root <PolicySet>;
* Attribute Finders configuration; attribute finders resolve attributes from other sources thant the XACML <Request>, e.g. external databases, external services, server environment, etc.

The reasons for creating different domains: 
* Users or organizations do not want others to access their data, or even be impacted by others working on the same application.
* The same user or organization may want to work on different domains for different use cases; e.g. work with one policyset for production environment, another for testing, another for a specific use case project, etc.

=== Domain Creation ===
You create a domain by doing a HTTPS POST request with XML payload to URL https://${SERVER_NAME}:${PORT}/authzforce/domains. Replace ${SERVER_NAME} and ${PORT} with your server hostname and port for HTTPS. You can do it with ''curl'' tool, with the certificate of a registered user - say ''John Doe'' - having the Superadmin role. But first, you need to get your private key in PEM format. One way consists to get the keystore in PKCS12 format first, as explained at the end of [[#Client Certificate Setup]]. Then convert to PEM format with ''openssl'' tool as follows:
<pre>$ openssl pkcs12 -in john.doe-taz-client-keystore.p12 -clcerts -out john.doe-taz-client-keystore.pem</pre>
Now, you are able to make the domain creation request with curl, using the client keystore ''john.doe-taz-client-keystore.pem'' in PEM format resulting from previous command, and the CA certificate ''taz-ca-cert.pem'': 
<pre>$ curl --verbose --trace-ascii - --cacert taz-ca-cert.pem --cert john.doe-taz-client-keystore.pem --request POST \ 
 --header "Content-Type: application/xml;charset=UTF-8" \
 --data '<?xml version="1.0" encoding="UTF-8"?><taz:properties xmlns:taz="http://thalesgroup.com/authz/model"><name>MyDomain</name><description>This is my domain.</description></taz:properties>' \
 --header "Accept: application/xml" https://${SERVER_NAME}:${PORT}/authzforce/domains
 
 ...
 Enter PEM pass phrase:
 ...
> POST /authzforce/domains HTTP/1.1
> User-Agent: curl/7.22.0 (x86_64-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3
> Host: az.testbed.fi-ware.eu
> Content-Type: application/xml;charset=UTF-8
> Accept: application/xml
> Content-Length: 227
>
...
< HTTP/1.1 200 OK
< Server: Authorization System
< Date: Mon, 04 Aug 2014 13:00:12 GMT
< Content-Type: application/xml
< Transfer-Encoding: chunked
<
<?xml version="1.0" encoding="UTF-8" standalone="yes"?><link xmlns="http://www.w3.org/2005/Atom" rel="item" href="0ae7f48f-1f13-11e3-a300-eb6797612f3f"/>
</pre>
'''WARNING''': Mind the leading and trailing single quotes for the ''--data'' argument. Do not use double quotes instead of these single quotes, otherwise curl will remove the double quotes in the XML payload itself, and send invalid XML which will be rejected by the server. The "--trace-ascii -" argument (the last dash here means ''stdout'') is indeed a way to check the actual request body sent by curl. So use it only if you need to dump the outgoing (and incoming) data, in particular the request body, on stdout.  

The ''href'' value in the response above gives you the domain ID (in the form of a UUID), that you will now use for assigning user roles on the domain.

=== Domain Role Assignment ===
Domain users must have one of the two roles may be assigned only at the domain level:
* Domain_Admin;
* PEP.
If this is the first time you assign a role on this domain, you have to create an OU for the domain in the directory (objectClass ''organizationalUnit''), under the role branch ''ou=roles'' created in section 'User Role Management Setup'. The ''ou'' value is the domain ID seen as ''href'' value in the previous section, e.g. ''ou=0ae7f48f-1f13-11e3-a300-eb6797612f3f'' for domain 0ae7f48f-1f13-11e3-a300-eb6797612f3f. Then create a group entry for each role (objectClass ''groupOfNames'') under this OU entry (similarly to Superadmin role in [[#Superadmin Role Assignment]]). For example:
<pre>$ cat add-domain-roles.ldif

dn: ou=0ae7f48f-1f13-11e3-a300-eb6797612f3f,ou=roles,dc=example,dc=com
objectClass: organizationalUnit
ou: 0ae7f48f-1f13-11e3-a300-eb6797612f3f
description: My Domain 1

dn: cn=Domain_Admin,ou=0ae7f48f-1f13-11e3-a300-eb6797612f3f,ou=roles,dc=example,dc=com
objectClass: groupOfNames
cn: Domain_Admin

dn: cn=PEP,ou=0ae7f48f-1f13-11e3-a300-eb6797612f3f,ou=roles,dc=example,dc=com
objectClass: groupOfNames
cn: PEP

$ ldapmodify -a -H ldap://localhost:389 -D "cn=Directory Manager" -W -f add-domain-roles.ldif</pre>

Finally, assign the users to one of the roles by adding a 'member' attribute with the user DN (in the user branch) as value (similarly to Superadmin role in [[#Superadmin Role Assignment]]). For example, assigning ''Domain_Admin'' role on the domain '0ae7f48f-1f13-11e3-a300-eb6797612f3f' to a user with ID '67c277db-911a-4ed2-bfda-3931bfdfb7e0' and another with ID 'b667f018-b52b-42a3-8c3e-863e31c54c58,ou=users,dc=fiware,dc=eu', then another with ID 'e1d25e2f-3421-447c-9819-3563db6cd179' to role ''PEP'':
<pre>$ cat assign-user-roles.ldif
dn: cn=Domain_Admin,ou=0ae7f48f-1f13-11e3-a300-eb6797612f3f,ou=roles,dc=example,dc=com
changetype: modify
add: member
member: uid=67c277db-911a-4ed2-bfda-3931bfdfb7e0,ou=users,dc=example,dc=com
member: uid=b667f018-b52b-42a3-8c3e-863e31c54c58,ou=users,dc=example,dc=com

dn: cn=PEP,ou=0ae7f48f-1f13-11e3-a300-eb6797612f3f,ou=roles,dc=example,dc=com
changetype: modify
add: member
member: uid=e1d25e2f-3421-447c-9819-3563db6cd179,ou=users,dc=example,dc=com

$ ldapmodify -a -H ldap://localhost:389 -D "cn=Directory Manager" -W -f assign-user-roles.ldif
</pre>

Once users have the proper roles, they can refer to the User and Programmers Guide to learn how to manage and use their domain with the API.

=== Domain Removal ===
You remove a domain by doing a HTTPS DELETE request with XML payload to URL https://${SERVER_NAME}:${PORT}/authzforce/domains/{domain_ID}. For example with ''curl'' tool, using the client keystore ''john.doe-taz-client-keystore.pem (PEM format) of some registered user ''John Doe'' with Superadmin role:
<pre>$ curl --verbose --cacert taz-ca-cert.pem --cert john.doe-taz-client-keystore.pem --request DELETE --header "Content-Type: application/xml;charset=UTF-8" \
 --header "Accept: application/xml" https://${SERVER_NAME}:${PORT}/authzforce/domains/0ae7f48f-1f13-11e3-a300-eb6797612f3f</pre>


= Administration =
== Glassfish Webapp Administration ==
Most administration of the Authorization Server webapp, security and monitoring can be done with standard Glassfish admin console or CLI operations.

== Application-Specific Administration ==
For application-specific configuration, refer to ''Configuration'' section in Installation.
Application error logs are located in ''authzforce_error.log'' file in glassfish domain ''logs'' directory.
Application access logs are located in ''authzforce_access.log'' file in glassfish domain ''logs'' directory.

Policy administration is part of the Authorization Server API and is addressed in the ''User Guide''.

= Sanity check procedures =
The Sanity Check Procedures are the steps that a System Administrator will take to verify that the installation is ready to be tested. This is therefore a preliminary set of tests to ensure that obvious or basic malfunctioning is fixed before proceeding to unit tests, integration tests and user validation.

==End to End testing==
To check the proper deployment and operation of the Authorization Server, perform the following steps:
# Configure your favorite HTTP client to use the Superadmin certificate created during installation phase, as client certificate (for authentication). Examples of free HTTP clients are curl, SoapUI, your favorite web browser. If you choose the latter, use one of the browser's REST client plugins and import the certificate in PKCS12 format into your browser's personal certificates.
#  Get the list of policy administration domains by doing the following HTTP request, replacing ''host'' with the Glassfish server hostname that must match the CN of the server certificate set up during installation phase, and ''port'' with the HTTPS port of the server, and ''contextRoot'' with the context root of the webapp deployed during installation:
#* Method: GET
#* URL: <pre>https://${host}:${port}/${contextRoot}/domains</pre>
#* Accept header: application/xml
# If you get a security warning about an untrusted certificate, and you want to get rid of it definitively, import the CA certificate generated during installation phase, into the client's trusted CAs, and send the request again.
# Check the response which should have the following headers and body (there may be more headers which do not require checking here):
#* Status Code: 200 OK
#* Content-Type: application/xml
#* Body:
<pre><?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:resources xmlns:ns2="http://thalesgroup.com/authzforce/model" xmlns:ns3="http://www.w3.org/2005/Atom">
    ... list of links to policy domains omitted here...
</ns2:resources>
</pre>

If you are testing this right after a fresh installation, the 'resources' tag will be empty since there are no domains yet created, and therefore none to be listed. You can check the exact body format in the representation element of response code 200 for method ''getDomains'' in the WADL (Web Application Description Language) document that describes the RESTful API of the service and is available at the following URL: <pre>https://${host}:${port}/${contextRoot}/?_wadl</pre>
Example on Linux:
<pre>$ wget --no-check-certificate https://az.example.com/authzforce/services</pre>

==List of Running Processes==
* One or more <code>java.exe</code> processes for Glassfish;
* One or more <code>java.exe</code> process for OpenDJ.

==Network interfaces Up & Open ==
* TCP 22
* TCP 80
* TCP 389
* TCP 443
* TCP 4848
* TCP 8443

==Databases==
To check the OpenDJ directory server status, run OpenDJ control panel via ''control-panel.sh'' command in OpenDJ directory.

=Diagnosis Procedures=
# Perform the test described in ''End to End Testing'': <pre>HTTP GET https://${host}:${port}/${contextRoot}/domains</pre>.
# If you get an error 404 Not Found, make sure the webapp is deployed and enabled in Glassfish
## In the admin WUI, if the webapp is not listed in Applications tab, deploy it.
## In the admin WUI, if webapp is listed as disabled, select it and click the ''Enable'' button.
## In both cases, if the enable or deployment action fails, check the <code>${GLASSFISH_DOMAIN_DIR}/logs/server.log</code>.
# If you get an error 401 or 403, see the Authorization Server logs as described in section ''Application-Specific Administration''. In particular, if you see JNDI LDAP connection error, check that the OpenDJ server status by running OpenDJ control panel locally. Check the Superadmin role is still properly assigned for your certificate as done during installation. For more information, see [http://opendj.forgerock.org/doc/admin-guide/index/chap-troubleshooting.html OpenDJ directoy server troubleshooting].
# If you get a Connection Refused, check that the Glassfish server is running by checking the server status in Glassfish admin WUI (Web User Interface)
## If you are unable to connect to the admin WUI, check that the Glassfish domain is started locally with command <code>asadmin list-domains</code>. If not, start the domain: <code>asadmin start-domain</code>
## If the command fails, check the domain logs in <code>${GLASSFISH_DOMAIN_DIR}/logs/server.log</code>. For more information, see [http://docs.oracle.com/cd/E18930_01/html/821-2436/ Glassfish 3.1 Troubleshooting Guide].
## If the command succeeds, or the domain is already started, and you still get a Connection Refused, check the server status via Glassfish admin WUI for the domain, and start the server if it is not started. Check you are using the right HTTP port in the list of HTTP ports given in the server ''General Information'' of the admin WUI.
## If you are able to connect locally but not remotely, check the network link, i.e. whether any network filtering is in place on the host or on the access network, or other network issue: network interface status, DNS/IP adress resolution, routing, etc.

For other status codes, see the Authorization Server logs as described in section ''Application-Specific Administration''.


==Resource availability==
To have a healthy enabler, the resource requirements listed in ''System Requirements'' must be satisfied, in particular:
* Minimum RAM: 4GB
* Minimum CPU: 2.6 GHz
* Minimum Disk space: 10 GB

==Remote Service Access==
The Access Control GE may communicate with Identity Management GEs on HTTPS (port 443), in particular the OAuth Token Endpoint and User Attribute Management API endpoint.

==Resource consumption==
The resource consumption strongly depends on the number of users registered in the system, the number of concurrent users and requests per user, the number of policy domains (a.k.a. tenants in this context) managed by the Authorization Server, and the complexity of the policies defined by administrators of each domain.

The memory consumption shall remain under 80% of allocated RAM. See ''System Requirements'' for the minimum required RAM.

The CPU usage shall remain  under 80% of allocated CPU. See ''System Requirements'' for the minimum required CPU.

As for disk usage, at any time, there should be 1GB free space left on the disk.

==I/O flows==
* HTTPS flows with possibly large XML payloads to port 443, 8443, 4848
* HTTP flow to port 80
* LDAPS flows to 636.
